@startuml
set namespaceSeparator ::

class "custom_cubit::custom_state.dart::CustomState" {
  +StateStatus status
  +T? data
  +String? error
  +List<Object?> props
  +String toString()
}

"custom_cubit::custom_state.dart::CustomState" o-- "custom_cubit::custom_state.dart::StateStatus"

class "custom_cubit::custom_state.dart::StateStatus" {
  +int index
  {static} +List<StateStatus> values
  {static} +StateStatus initial
  {static} +StateStatus loading
  {static} +StateStatus success
  {static} +StateStatus failure
}

"custom_cubit::custom_state.dart::StateStatus" o-- "custom_cubit::custom_state.dart::StateStatus"

abstract class "custom_cubit::base_custom_cubit.dart::BaseCustomCubit" {
  +BaseCustomService service
  +BaseDependencyResolver<E> dependencyResolver
  +void handler()
}

"custom_cubit::base_custom_cubit.dart::BaseCustomCubit" o-- "custom_cubit::base_custom_service.dart::BaseCustomService"
"custom_cubit::base_custom_cubit.dart::BaseCustomCubit" o-- "custom_cubit::base_dependency_resolver.dart::BaseDependencyResolver<E>"
"bloc::src::cubit.dart::Cubit" <|-- "custom_cubit::base_custom_cubit.dart::BaseCustomCubit"

abstract class "custom_cubit::base_dependency_resolver.dart::BaseDependencyResolver" {
  -String _defaultResolverKey
  -Map<String, BehaviorSubject<dynamic>> _stream
  +void addStream()
  +BehaviorSubject<T> getStream()
  +void addCallback()
  +BehaviorSubject<E> resolve()
  +String getStreamKey()
}

abstract class "custom_cubit::base_custom_service.dart::BaseCustomService" {
}

abstract class "custom_cubit::base_entity.dart::BaseEntity" {
}

@enduml